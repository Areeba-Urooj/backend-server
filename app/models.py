from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List

# --- 1. File Upload Model ---
class UploadResponse(BaseModel):
Â  Â  """
Â  Â  Defines the expected JSON structure after a successful file upload.
Â  Â  The file_id field contains the full S3 Key (path within the bucket).
Â  Â  """
Â  Â  status: str
Â  Â  file_id: str = Field(..., description="The S3 Key (path/filename) of the uploaded object.")
Â  Â  file_name: str
Â  Â  file_size: int
Â  Â  content_type: str
Â  Â  upload_time: Optional[str] = None

# --- 2. Analysis Submission Model (Input) ---
class AnalysisRequest(BaseModel):
Â  Â  """
Â  Â  Defines the expected JSON structure for submitting a job.
Â  Â  """
Â  Â  # ðŸ’¡ UPDATED DESCRIPTION
Â  Â  file_id: str = Field(..., description="The S3 Key of the audio file returned by the /upload endpoint.")
Â  Â  transcript: str = Field(..., description="The full, unedited transcript of the audio.")

# --- 3. Analysis Status/Result Model (Output) ---
class AnalysisStatusResponse(BaseModel):
# ... (No change required) ...
Â  Â  job_id: str
Â  Â  status: str = Field(..., description="Job status: 'queued', 'started', 'finished', or 'failed'.")
Â  Â  result: Optional[Dict[str, Any]] = None
Â  Â  error: Optional[str] = None
